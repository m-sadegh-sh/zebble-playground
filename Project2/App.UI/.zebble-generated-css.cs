//----------------------
// <auto-generated>
//     GENERATED BY ZEBBLE
// </auto-generated>
#pragma warning disable  IDE0017, CS0108, CS0436
//----------------------

using System;
using Zebble;
using Zebble.Services;
using Zebble.Plugin;
using Zebble.Device;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using System.Threading.Tasks;
using Olive;

namespace UI
{
    [EscapeGCop("Auto-generated")]
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Common.scss---------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LinkCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainImagePopupCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.InputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopupTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LandingCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarStackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarBodyScrollerWrapperCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarBodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarBodyScrollerBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarFooterCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarFooterButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavBarFooterTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavBarContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavBarContentLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavBarContentRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavBarContentRight_1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavBarContentMenuCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavBarContentTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavBarContentTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopupOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BaseModalCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BaseModalModalPanelWrapperCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BaseModalPanelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BaseModalPanelContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BaseModalIntroCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BaseModalHeaderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BaseModalHeaderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NormalSizeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BgPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Border0CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextCenterCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FontBoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextBoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WidthContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.W100CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CollectionRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalModalPanelWrapperCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalPanelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalHeaderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalHeaderImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalContentTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalFirstButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalFirstButtonButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalSecondButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ConfirmationModalSecondButtonButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTopBackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTextViewFirstCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTextViewSecondCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyPrimaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodySecondaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyStackClassCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1Body_1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PageDarkBodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WrapperCssRule());
        }
    }
}

// Ensure auto-generated namespaces exist:
namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Plugin { }
namespace Zebble.Data { }

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("input.scss:0", "Button")]
    [CssBody("height: 40px; border: none; border-radius: 10px; color: #484646; margin-bottom: 10px;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Height = 40;
            view.Css.Margin.Bottom = 10;
            view.Css.Border = 0;
            view.Css.BorderRadius = 10;
            view.Css.TextColor = "#484646";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:3", "Button:disabled")]
    [CssBody("color: #a3a2a2; border: 1px solid #d1d1d1; border-radius: 10px;")]
    class ButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = "#a3a2a2";
            view.Css.Border = new Border(1, "#d1d1d1");
            view.Css.BorderRadius = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:5", "Link")]
    [CssBody("color: #484646; text-align: center; margin-top: 15px;")]
    class LinkCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Link

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Link)untypedView;
            view.Css.Margin.Top = 15;
            view.Css.TextColor = "#484646";
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:7", "ImageView")]
    [CssBody("visibility: visible; display: normal;")]
    class ImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            return true;
        }

        public override async Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Visible = true;
            await view.Css.IgnoredAsync(false);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:10", "MainImage.popup")]
    [CssBody("height: 40px; margin: 10px 0;")]
    class MainImagePopupCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is MainImage && HasClass(view, "popup"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (MainImage)untypedView;
            view.Css.Height = 40;
            view.Css.Margin(vertical: 10, horizontal: 0);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Input")]
    [CssBody("height: 50px; border-bottom: 2px; border-bottom-color: gray;")]
    class InputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Input

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Input)untypedView;
            view.Css.Height = 50;
            view.Css.Border = new Border { Color = "2"};
            view.Css.Border = new Border { Color = "gray"};

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:16", "PopupText")]
    [CssBody("padding-top: 5px; padding-bottom: 5px; height: 60px;")]
    class PopupTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopupText

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopupText)untypedView;
            view.Css.Height = 60;
            view.Css.Padding.Top = 5;
            view.Css.Padding.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:16", "#Landing")]
    [CssBody("background-color: #a0d4d4;")]
    class LandingCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Landing

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#a0d4d4";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:2", "NavBar")]
    [CssBody("height: 100%; width: 100%;")]
    class NavBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: NavBar

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (NavBar)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:3", "NavBar > Stack")]
    [CssBody("height: calc(\"Container\");")]
    class NavBarStackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Stack

            view = view.parent;

            if (view == null) return false;
            else if (!(view is NavBar)) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Stack)untypedView;
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:4", "NavBar #BodyScrollerWrapper")]
    [CssBody("height: calc(\"Container\");")]
    class NavBarBodyScrollerWrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BodyScrollerWrapper

            view = CssEngine.FindParentByType<NavBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "NavBar #BodyScroller")]
    [CssBody("background: white; height: 100%; width: 100%;")]
    class NavBarBodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #BodyScroller

            view = CssEngine.FindParentByType<NavBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:7", "NavBar #BodyScroller > #Body")]
    [CssBody("padding: 15px;")]
    class NavBarBodyScrollerBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = view.parent;

            if (view == null) return false;
            else if (!(view.Id == "BodyScroller")) return false;

            view = CssEngine.FindParentByType<NavBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(15);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:8", "NavBar #Footer")]
    [CssBody("background-color: whitesmoke; padding-left: 15px; padding-right: 15px;")]
    class NavBarFooterCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Footer

            view = CssEngine.FindParentByType<NavBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Left = 15;
            view.Css.Padding.Right = 15;
            view.Css.BackgroundColor = Colors.WhiteSmoke;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:9", "NavBar #Footer Button")]
    [CssBody("margin-top: 15px; margin-bottom: 15px;")]
    class NavBarFooterButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentById(view, "Footer");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Margin.Top = 15;
            view.Css.Margin.Bottom = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:9", "NavBar #Footer TextView")]
    [CssBody("margin-top: 15px; margin-bottom: 15px;")]
    class NavBarFooterTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "Footer");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Margin.Top = 15;
            view.Css.Margin.Bottom = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:2", "NavigationBar")]
    [CssBody("background-color: whitesmoke;")]
    class NavigationBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: NavigationBar

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (NavigationBar)untypedView;
            view.Css.BackgroundColor = Colors.WhiteSmoke;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:3", "NavigationBar #NavBarContent")]
    [CssBody("height: 30px; margin-top: 5px;")]
    class NavigationBarNavBarContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #NavBarContent

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 30;
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:4", "NavigationBar #NavBarContent #Left")]
    [CssBody("height: 100%; width: 50%;")]
    class NavigationBarNavBarContentLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Left

            view = CssEngine.FindParentById(view, "NavBarContent");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 50.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:4", "NavigationBar #NavBarContent #Right")]
    [CssBody("height: 100%; width: 50%;")]
    class NavigationBarNavBarContentRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Right

            view = CssEngine.FindParentById(view, "NavBarContent");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 50.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "NavigationBar #NavBarContent #Right")]
    [CssBody("left: 50%;")]
    class NavigationBarNavBarContentRight_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Right

            view = CssEngine.FindParentById(view, "NavBarContent");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.X = 50.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:6", "NavigationBar #NavBarContent #Menu")]
    [CssBody("background: url(\"Images/Icons/Menu.png\");")]
    class NavigationBarNavBarContentMenuCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Menu

            view = CssEngine.FindParentById(view, "NavBarContent");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImagePath = "Images/Icons/Menu.png";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:7", "NavigationBar #NavBarContent > #Title")]
    [CssBody("color: grey; height: 100%; font-size: 22px; text-align: center; width: 100%;")]
    class NavigationBarNavBarContentTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = view.parent;

            if (view == null) return false;
            else if (!(view.Id == "NavBarContent")) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Font.Size = 22;
            view.Css.TextColor = Colors.Grey;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:8", "NavigationBar #NavBarContent TextView")]
    [CssBody("color: white;")]
    class NavigationBarNavBarContentTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "NavBarContent");

            if (view is null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "PopUp")]
    [CssBody("width: 100%; height: 100%; padding: 0 20px;")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(vertical: 0, horizontal: 20);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:14", "#PopupOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background-color: red;")]
    class PopupOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PopupOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:16", "BaseModal")]
    [CssBody("padding-top: 20px;")]
    class BaseModalCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: BaseModal

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (BaseModal)untypedView;
            view.Css.Padding.Top = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "BaseModal #ModalPanelWrapper")]
    [CssBody("padding: 15px; top: calc(\"View.Root.Height, view.Height, (rh,h) => rh / 2 - h / 2\");")]
    class BaseModalModalPanelWrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ModalPanelWrapper

            view = CssEngine.FindParentByType<BaseModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(15);
            view.Css.Y = new Length.BindingLengthRequest(View.Root.Height, view.Height, (rh,h) => rh / 2 - h / 2);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Pages/_Landing.scss:2", "BaseModal #Panel")]
    [CssBody("border-radius: 15px; background-color: white;")]
    class BaseModalPanelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Panel

            view = CssEngine.FindParentByType<BaseModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BorderRadius = 15;
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Pages/_Landing.scss:3", "BaseModal #Panel #Content")]
    [CssBody("height: auto;")]
    class BaseModalPanelContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Content

            view = CssEngine.FindParentById(view, "Panel");

            if (view is null) return false;

            view = CssEngine.FindParentByType<BaseModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = null;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "BaseModal #Intro")]
    [CssBody("padding: 25px; text-align: center;")]
    class BaseModalIntroCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Intro

            view = CssEngine.FindParentByType<BaseModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(25);
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", "BaseModal #Header")]
    [CssBody("padding: 10px; margin-bottom: 20px; border-top-left-radius: 15px; border-top-right-radius: 15px;")]
    class BaseModalHeaderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Header

            view = CssEngine.FindParentByType<BaseModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(10);
            view.Css.Margin.Bottom = 20;
            view.Css.BorderRadius.TopLeft = 15;
            view.Css.BorderRadius.TopRight = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:3", "BaseModal #Header .title")]
    [CssBody("padding: 5px; padding-left: 10px; color: black; text-align: center; margin-bottom: 0;")]
    class BaseModalHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .title

            view = CssEngine.FindParentById(view, "Header");

            if (view is null) return false;

            view = CssEngine.FindParentByType<BaseModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(5);
            view.Css.Padding.Left = 10;
            view.Css.Margin.Bottom = 0;
            view.Css.TextColor = Colors.Black;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", ".Normal_Size")]
    [CssBody("font-size: 16px;")]
    class NormalSizeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Normal_Size

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", ".bg_primary")]
    [CssBody("background-color: gray; color: white;")]
    class BgPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .bg_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Gray;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", ".border_0")]
    [CssBody("border-width: 0;")]
    class Border0CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .border_0

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border.Width = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:16", ".text_primary")]
    [CssBody("color: black;")]
    class TextPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", ".text_center")]
    [CssBody("text-align: center;")]
    class TextCenterCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_center

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", ".text_right")]
    [CssBody("text-align: right;")]
    class TextRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_right

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:26", ".text_left")]
    [CssBody("text-align: left;")]
    class TextLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_left

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", ".font-bold")]
    [CssBody("font-weight: 400;")]
    class FontBoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .font-bold

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = false;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:2", ".text_bold")]
    [CssBody("font-weight: 400;")]
    class TextBoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_bold

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = false;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:31", ".width_content")]
    [CssBody("width: calc(\"content\");")]
    class WidthContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .width_content

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:36", ".my-2")]
    [CssBody("margin-top: 5px; margin-bottom: 5px;")]
    class My2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.Margin.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:36", ".my-3")]
    [CssBody("margin-top: 10px; margin-bottom: 10px;")]
    class My3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.Margin.Bottom = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:41", ".my-4")]
    [CssBody("margin-top: 15px; margin-bottom: 15px;")]
    class My4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;
            view.Css.Margin.Bottom = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:44", ".mx-2")]
    [CssBody("margin-right: 5px; margin-left: 5px;")]
    class Mx2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 5;
            view.Css.Margin.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:36", ".mx-3")]
    [CssBody("margin-right: 10px; margin-left: 10px;")]
    class Mx3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 10;
            view.Css.Margin.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:36", ".mx-4")]
    [CssBody("margin-right: 15px; margin-left: 15px;")]
    class Mx4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 15;
            view.Css.Margin.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:36", ".mt-2")]
    [CssBody("margin-top: 5px;")]
    class Mt2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:58", ".mt-3")]
    [CssBody("margin-top: 10px;")]
    class Mt3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:60", ".mt-4")]
    [CssBody("margin-top: 15px;")]
    class Mt4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_NavBar.scss:36", ".px-2")]
    [CssBody("padding-right: 5px; padding-left: 5px;")]
    class Px2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 5;
            view.Css.Padding.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".px-3")]
    [CssBody("padding-right: 10px; padding-left: 10px;")]
    class Px3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 10;
            view.Css.Padding.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:3", ".px-4")]
    [CssBody("padding-right: 15px; padding-left: 15px;")]
    class Px4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 15;
            view.Css.Padding.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:5", ".w-100")]
    [CssBody("width: 100%;")]
    class W100CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .w-100

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:8", "CollectionRow")]
    [CssBody("height: 40px; border-bottom: 1px solid gray; margin-top: 5px; margin-bottom: 5px;")]
    class CollectionRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: CollectionRow

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (CollectionRow)untypedView;
            view.Css.Height = 40;
            view.Css.Margin.Top = 5;
            view.Css.Margin.Bottom = 5;
            view.Css.Border = new Border { Bottom = 1, Color = "gray"};

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:10", "ConfirmationModal #ModalPanelWrapper")]
    [CssBody("padding: 15px;")]
    class ConfirmationModalModalPanelWrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #ModalPanelWrapper

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(15);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:12", "ConfirmationModal #Panel")]
    [CssBody("border-radius: 15px; background-color: white;")]
    class ConfirmationModalPanelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Panel

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BorderRadius = 15;
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "ConfirmationModal #Header")]
    [CssBody("border-top-left-radius: 15px; border-top-right-radius: 15px; text-align: center;")]
    class ConfirmationModalHeaderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Header

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BorderRadius.TopLeft = 15;
            view.Css.BorderRadius.TopRight = 15;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:2", "ConfirmationModal #Header ImageView")]
    [CssBody("margin-top: 20px; width: calc(\"Content\");")]
    class ConfirmationModalHeaderImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentById(view, "Header");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Width = Length.AutoStrategy.Content;
            view.Css.Margin.Top = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:2", "ConfirmationModal #Content")]
    [CssBody("padding-right: 25px; padding-left: 25px; padding-top: 20px; padding-bottom: 20px;")]
    class ConfirmationModalContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Content

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 25;
            view.Css.Padding.Left = 25;
            view.Css.Padding.Top = 20;
            view.Css.Padding.Bottom = 20;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:6", "ConfirmationModal #Content TextView")]
    [CssBody("text-align: center;")]
    class ConfirmationModalContentTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "Content");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:2", "ConfirmationModal #FirstButton")]
    [CssBody("border: 1px 1px 0 0 solid gray; width: 50%;")]
    class ConfirmationModalFirstButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #FirstButton

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 50.Percent();
            view.Css.Border = new Border { Top = 1, Right = 1, Bottom = 0, Left = 0 };

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:11", "ConfirmationModal #FirstButton Button")]
    [CssBody("color: blue;")]
    class ConfirmationModalFirstButtonButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentById(view, "FirstButton");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = Colors.Blue;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:2", "ConfirmationModal #SecondButton")]
    [CssBody("border: 1px 0 0 0 solid gray; width: 50%; color: blue;")]
    class ConfirmationModalSecondButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #SecondButton

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 50.Percent();
            view.Css.Border = new Border { Top = 1, Right = 0, Bottom = 0, Left = 0 };
            view.Css.TextColor = Colors.Blue;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:15", "ConfirmationModal #SecondButton Button")]
    [CssBody("color: blue;")]
    class ConfirmationModalSecondButtonButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentById(view, "SecondButton");

            if (view is null) return false;

            view = CssEngine.FindParentByType<ConfirmationModal>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = Colors.Blue;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:25", "Page1 #Body")]
    [CssBody("height: calc(\"Container\"); background-color: white; background: white;")]
    class Page1BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.BackgroundColor = Colors.White;
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:26", "Page1 #Body .top-back")]
    [CssBody("width: calc(\"View.Root.Width , rw => rw*0.9 \"); height: calc(\"View.Root.Height , rh => rh * 0.8\"); background-size: cover; vertical-align: top; text-align: center; top: 0; border-radius: 25px;")]
    class Page1BodyTopBackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .top-back

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fill;
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Height , rh => rh * 0.8);
            view.Css.Width = new Length.BindingLengthRequest(View.Root.Width , rw => rw*0.9 );
            view.Css.TextAlignment = Alignment.TopMiddle;
            view.Css.TextAlignment = Alignment.TopMiddle;
            view.Css.Y = 0;
            view.Css.BorderRadius = 25;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:27", "Page1 #Body TextView")]
    [CssBody("position: absolute;")]
    class Page1BodyTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Absolute = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:28", "Page1 #Body TextView.first")]
    [CssBody("font-family: 'Poppins'; font-weight: 600; font-size: 24px; line-height: 36px; text-align: center; color: #3A1251;")]
    class Page1BodyTextViewFirstCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "first"))) return false;

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 24;
            view.LineHeight = 36;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:2", "Page1 #Body TextView.second")]
    [CssBody("font-family: 'Poppins'; font-weight: 500; font-size: 15px; line-height: 22px; text-align: center; color: #3A1251;")]
    class Page1BodyTextViewSecondCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "second"))) return false;

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 15;
            view.LineHeight = 22;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:31", "Page1 #Body .PrimaryButton")]
    [CssBody("position: relative; width: 40%; color: white; background-color: #AE24F6; margin-right: 5px;")]
    class Page1BodyPrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .PrimaryButton

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 40.Percent();
            view.Css.Margin.Right = 5;
            view.Css.Absolute = false;
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#AE24F6";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:32", "Page1 #Body .SecondaryButton")]
    [CssBody("position: relative; width: 40%; color: white; background-color: #32BDD2; margin-left: 5px;")]
    class Page1BodySecondaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SecondaryButton

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 40.Percent();
            view.Css.Margin.Left = 5;
            view.Css.Absolute = false;
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#32BDD2";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:33", "Page1 #Body .StackClass")]
    [CssBody("top: calc(\"View.Root.Height , rh => rh * 0.76\");")]
    class Page1BodyStackClassCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .StackClass

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Y = new Length.BindingLengthRequest(View.Root.Height , rh => rh * 0.76);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:35", ".Page1 #Body")]
    [CssBody("background-color: #333333; background: #333333;")]
    class Page1Body_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByCssClass(view, "Page1");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#333333";
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_BaseModal.scss:35", "Page:dark #Body")]
    [CssBody("background-color: #333333; background: #333333;")]
    class PageDarkBodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = view.parent;
            while (true)
            {
                if (view == null) return false;
                else if (view is Page && view.PseudoCssState.ContainsWholeWord("dark")) break;
                view = view.parent;
            }

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#333333";
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:1", "#Body")]
    [CssBody("height: 100%;")]
    class BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "#Wrapper")]
    [CssBody("padding: 16px;")]
    class WrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Wrapper

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(16);

            return Task.CompletedTask;
        }
    }
}