//----------------------
// <auto-generated>
//     GENERATED BY ZEBBLE
// </auto-generated>
#pragma warning disable  IDE0017, CS0108, CS0436
//----------------------

using System;
using Zebble;
using Zebble.Services;
using Zebble.Plugin;
using Zebble.Device;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using System.Threading.Tasks;
using Olive;

namespace UI
{
    [EscapeGCop("Auto-generated")]
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Common.scss---------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LinkCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.LandingCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopupOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NormalSizeCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BgPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Border0CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextPrimaryCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextCenterCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextRightCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextLeftCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FontBoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextBoldCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WidthContentCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.My4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mx4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Mt4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px3CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Px4CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.W100CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HeaderTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SubjectTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PhotoCenterCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkHeaderTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkSubjectTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTopBackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyHeaderTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTextViewFirstCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyTextViewSecondCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodySecondaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyStackClassCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyHeaderText_1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page1BodyRecyclerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage1BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage1BodyHeaderTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyTopBackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyHeaderTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyTextViewFirstCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyTextViewSecondCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodySecondaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyStackClassCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyHeaderText_1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyScrollerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyRecyclerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyDetailStackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyText1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.Page2BodyText2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage2BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage2BodyHeaderTextCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage2BodySecondaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage2BodyDetailStackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage2BodyText1CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DarkPage2BodyText2CssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BodyCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WrapperCssRule());
        }
    }
}

// Ensure auto-generated namespaces exist:
namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Plugin { }
namespace Zebble.Data { }

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("input.scss:0", "Button")]
    [CssBody("height: 40px; border: none; border-radius: 10px; color: #484646; margin-bottom: 10px;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Height = 40;
            view.Css.Margin.Bottom = 10;
            view.Css.Border = 0;
            view.Css.BorderRadius = 10;
            view.Css.TextColor = "#484646";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:3", "Button:disabled")]
    [CssBody("color: #a3a2a2; border: 1px solid #d1d1d1; border-radius: 10px;")]
    class ButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = "#a3a2a2";
            view.Css.Border = new Border(1, "#d1d1d1");
            view.Css.BorderRadius = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:5", "Link")]
    [CssBody("color: #484646; text-align: center; margin-top: 15px;")]
    class LinkCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Link

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (Link)untypedView;
            view.Css.Margin.Top = 15;
            view.Css.TextColor = "#484646";
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:7", "ImageView")]
    [CssBody("visibility: visible; display: normal;")]
    class ImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            return true;
        }

        public override async Task Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Visible = true;
            await view.Css.IgnoredAsync(false);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:12", "#Landing")]
    [CssBody("background-color: #a0d4d4;")]
    class LandingCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Landing

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#a0d4d4";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "PopUp")]
    [CssBody("width: 100%; height: 100%; padding: 0 20px;")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Padding(vertical: 0, horizontal: 20);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:16", "#PopupOverlay")]
    [CssBody("width: 100%; height: 100%; position: absolute; opacity: 0.35; background-color: red;")]
    class PopupOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #PopupOverlay

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Width = 100.Percent();
            view.Css.Absolute = true;
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Red;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Button.scss:16", ".Normal_Size")]
    [CssBody("font-size: 16px;")]
    class NormalSizeCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Normal_Size

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Size = 16;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:2", ".bg_primary")]
    [CssBody("background-color: gray; color: white;")]
    class BgPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .bg_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Gray;
            view.Css.TextColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_ImageView.scss:4", ".border_0")]
    [CssBody("border-width: 0;")]
    class Border0CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .border_0

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Border.Width = 0;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:2", ".text_primary")]
    [CssBody("color: black;")]
    class TextPrimaryCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_primary

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Text.scss:4", ".text_center")]
    [CssBody("text-align: center;")]
    class TextCenterCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_center

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Pages/_Landing.scss:2", ".text_right")]
    [CssBody("text-align: right;")]
    class TextRightCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_right

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Right;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".text_left")]
    [CssBody("text-align: left;")]
    class TextLeftCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_left

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Left;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:3", ".font-bold")]
    [CssBody("font-weight: 400;")]
    class FontBoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .font-bold

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = false;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:3", ".text_bold")]
    [CssBody("font-weight: 400;")]
    class TextBoldCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .text_bold

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Bold = false;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:5", ".width_content")]
    [CssBody("width: calc(\"content\");")]
    class WidthContentCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .width_content

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = Length.AutoStrategy.Content;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:8", ".my-2")]
    [CssBody("margin-top: 5px; margin-bottom: 5px;")]
    class My2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.Margin.Bottom = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:10", ".my-3")]
    [CssBody("margin-top: 10px; margin-bottom: 10px;")]
    class My3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;
            view.Css.Margin.Bottom = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_PopUp.scss:12", ".my-4")]
    [CssBody("margin-top: 15px; margin-bottom: 15px;")]
    class My4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .my-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;
            view.Css.Margin.Bottom = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".mx-2")]
    [CssBody("margin-right: 5px; margin-left: 5px;")]
    class Mx2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 5;
            view.Css.Margin.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:2", ".mx-3")]
    [CssBody("margin-right: 10px; margin-left: 10px;")]
    class Mx3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 10;
            view.Css.Margin.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:4", ".mx-4")]
    [CssBody("margin-right: 15px; margin-left: 15px;")]
    class Mx4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mx-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Right = 15;
            view.Css.Margin.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:6", ".mt-2")]
    [CssBody("margin-top: 5px;")]
    class Mt2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:8", ".mt-3")]
    [CssBody("margin-top: 10px;")]
    class Mt3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".mt-4")]
    [CssBody("margin-top: 15px;")]
    class Mt4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .mt-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Top = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:12", ".px-2")]
    [CssBody("padding-right: 5px; padding-left: 5px;")]
    class Px2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-2

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 5;
            view.Css.Padding.Left = 5;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:15", ".px-3")]
    [CssBody("padding-right: 10px; padding-left: 10px;")]
    class Px3CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-3

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 10;
            view.Css.Padding.Left = 10;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".px-4")]
    [CssBody("padding-right: 15px; padding-left: 15px;")]
    class Px4CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .px-4

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding.Right = 15;
            view.Css.Padding.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:20", ".w-100")]
    [CssBody("width: 100%;")]
    class W100CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .w-100

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:22", ".HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: #3A1251;")]
    class HeaderTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".SubjectText")]
    [CssBody("font-family: 'Poppins'; font-size: 12px; font-weight: 600; color: #3A1251; text-align: center; width: 80px; background: #FFFFFF; margin-left: 0;")]
    class SubjectTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SubjectText

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 80;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 12;
            view.Css.Font.Bold = false;
            view.Css.Margin.Left = 0;
            view.Css.TextColor = "#3A1251";
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.BackgroundColor = "#FFFFFF";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:26", ".PhotoCenter")]
    [CssBody("display: block; margin-left: auto; margin-right: auto; background: #FFFFFF;")]
    class PhotoCenterCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .PhotoCenter

            return true;
        }

        public override async Task Apply(View view)
        {
            view.Css.Margin.Left = null;
            view.Css.Margin.Right = null;
            await view.Css.IgnoredAsync(false);
            view.Css.BackgroundColor = "#FFFFFF";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:31", ".dark .HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: white; width: 80px; background: #333333;")]
    class DarkHeaderTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Width = 80;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".dark .SubjectText")]
    [CssBody("font-family: 'Poppins'; font-size: 12px; font-weight: 600; color: white; text-align: center; background: #333333;")]
    class DarkSubjectTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SubjectText

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 12;
            view.Css.Font.Bold = false;
            view.Css.TextColor = Colors.White;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:40", "Page1 #Body")]
    [CssBody("height: calc(\"Container\"); background: #F5F5F5;")]
    class Page1BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.BackgroundColor = "#F5F5F5";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:41", "Page1 #Body .top-back")]
    [CssBody("width: calc(\"View.Root.Width , rw => rw*0.9 \"); height: calc(\"View.Root.Height , rh => rh * 0.8\"); background-size: cover; vertical-align: top; text-align: center; top: 0; border-radius: 25px;")]
    class Page1BodyTopBackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .top-back

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fill;
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Height , rh => rh * 0.8);
            view.Css.Width = new Length.BindingLengthRequest(View.Root.Width , rw => rw*0.9 );
            view.Css.TextAlignment = Alignment.TopMiddle;
            view.Css.TextAlignment = Alignment.TopMiddle;
            view.Css.Y = 0;
            view.Css.BorderRadius = 25;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:42", "Page1 #Body .HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: #3A1251;")]
    class Page1BodyHeaderTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page1 #Body TextView")]
    [CssBody("position: absolute;")]
    class Page1BodyTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Absolute = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:45", "Page1 #Body TextView.first")]
    [CssBody("font-family: 'Poppins'; font-weight: 600; font-size: 24px; line-height: 36px; text-align: center; color: #3A1251;")]
    class Page1BodyTextViewFirstCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "first"))) return false;

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 24;
            view.LineHeight = 36;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:46", "Page1 #Body TextView.second")]
    [CssBody("font-family: 'Poppins'; font-weight: 500; font-size: 15px; line-height: 22px; text-align: center; color: #3A1251;")]
    class Page1BodyTextViewSecondCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "second"))) return false;

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 15;
            view.LineHeight = 22;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:47", "Page1 #Body .SecondaryButton")]
    [CssBody("color: white; background-color: #32BDD2;")]
    class Page1BodySecondaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SecondaryButton

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#32BDD2";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page1 #Body .StackClass")]
    [CssBody("top: calc(\"View.Root.Height , rh => rh * 0.76\");")]
    class Page1BodyStackClassCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .StackClass

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Y = new Length.BindingLengthRequest(View.Root.Height , rh => rh * 0.76);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:50", "Page1 #Body .HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: #3A1251; background: #F5F5F5;")]
    class Page1BodyHeaderText_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.TextColor = "#3A1251";
            view.Css.BackgroundColor = "#F5F5F5";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:51", "Page1 #Body .Scroller")]
    [CssBody("height: calc(\"Container\");")]
    class Page1BodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Scroller

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:52", "Page1 #Body .Recycler")]
    [CssBody("margin-left: 15px;")]
    class Page1BodyRecyclerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Recycler

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:55", ".dark Page1 #Body")]
    [CssBody("background: black;")]
    class DarkPage1BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:56", ".dark Page1 #Body .HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: white; background: black; margin-left: 15px;")]
    class DarkPage1BodyHeaderTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page1>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.Margin.Left = 15;
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:62", "Page2 #Body")]
    [CssBody("height: calc(\"Container\"); background: #F5F5F5;")]
    class Page2BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;
            view.Css.BackgroundColor = "#F5F5F5";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page2 #Body .top-back")]
    [CssBody("width: calc(\"View.Root.Width , rw => rw*0.9 \"); height: calc(\"View.Root.Height , rh => rh * 0.8\"); background-size: cover; vertical-align: top; text-align: center; top: 0; border-radius: 25px;")]
    class Page2BodyTopBackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .top-back

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundImageStretch = Stretch.Fill;
            view.Css.Height = new Length.BindingLengthRequest(View.Root.Height , rh => rh * 0.8);
            view.Css.Width = new Length.BindingLengthRequest(View.Root.Width , rw => rw*0.9 );
            view.Css.TextAlignment = Alignment.TopMiddle;
            view.Css.TextAlignment = Alignment.TopMiddle;
            view.Css.Y = 0;
            view.Css.BorderRadius = 25;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:64", "Page2 #Body .HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: #3A1251;")]
    class Page2BodyHeaderTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:65", "Page2 #Body TextView")]
    [CssBody("position: absolute;")]
    class Page2BodyTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Absolute = true;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page2 #Body TextView.first")]
    [CssBody("font-family: 'Poppins'; font-weight: 600; font-size: 24px; line-height: 36px; text-align: center; color: #3A1251;")]
    class Page2BodyTextViewFirstCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "first"))) return false;

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 24;
            view.LineHeight = 36;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:67", "Page2 #Body TextView.second")]
    [CssBody("font-family: 'Poppins'; font-weight: 500; font-size: 15px; line-height: 22px; text-align: center; color: #3A1251;")]
    class Page2BodyTextViewSecondCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is TextView && HasClass(view, "second"))) return false;

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 15;
            view.LineHeight = 22;
            view.Css.TextAlignment = Alignment.Middle;
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:68", "Page2 #Body .SecondaryButton")]
    [CssBody("color: white; background-color: #32BDD2;")]
    class Page2BodySecondaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SecondaryButton

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#32BDD2";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page2 #Body .StackClass")]
    [CssBody("top: calc(\"View.Root.Height , rh => rh * 0.76\");")]
    class Page2BodyStackClassCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .StackClass

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Y = new Length.BindingLengthRequest(View.Root.Height , rh => rh * 0.76);

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:70", "Page2 #Body .HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: #3A1251; background: #F5F5F5;")]
    class Page2BodyHeaderText_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.TextColor = "#3A1251";
            view.Css.BackgroundColor = "#F5F5F5";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:71", "Page2 #Body .Scroller")]
    [CssBody("height: calc(\"Container\");")]
    class Page2BodyScrollerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Scroller

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = Length.AutoStrategy.Container;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "Page2 #Body .Recycler")]
    [CssBody("margin-left: 15px;")]
    class Page2BodyRecyclerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Recycler

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Margin.Left = 15;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:73", "Page2 #Body .DetailStack")]
    [CssBody("height: 120px; width: 340px; background: white; margin-top: 10px;")]
    class Page2BodyDetailStackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .DetailStack

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 120;
            view.Css.Width = 340;
            view.Css.Margin.Top = 10;
            view.Css.BackgroundColor = Colors.White;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:74", "Page2 #Body .Text1")]
    [CssBody("font-family: 'Poppins'; font-weight: 600; font-size: 20px; color: #3A1251; padding: 5px;")]
    class Page2BodyText1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Text1

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 20;
            view.Css.Padding(5);
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:75", "Page2 #Body .Text2")]
    [CssBody("font-family: 'Poppins'; height: auto; font-weight: 500; font-size: 13px; color: #3A1251; padding: 5px;")]
    class Page2BodyText2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Text2

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = null;
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Bold = false;
            view.Css.Font.Size = 13;
            view.Css.Padding(5);
            view.Css.TextColor = "#3A1251";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:78", ".dark Page2 #Body")]
    [CssBody("background: black;")]
    class DarkPage2BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:79", ".dark Page2 #Body .HeaderText")]
    [CssBody("font-family: 'Poppins'; font-size: 16px; font-weight: 600; color: white; background: black; margin-left: 15px;")]
    class DarkPage2BodyHeaderTextCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .HeaderText

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Font.Name = "Poppins";
            view.Css.Font.Size = 16;
            view.Css.Font.Bold = false;
            view.Css.Margin.Left = 15;
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = Colors.Black;

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:80", ".dark Page2 #Body .SecondaryButton")]
    [CssBody("color: #3A1251; background-color: #32BDD2;")]
    class DarkPage2BodySecondaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .SecondaryButton

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#3A1251";
            view.Css.BackgroundColor = "#32BDD2";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", ".dark Page2 #Body .DetailStack")]
    [CssBody("background: #333333;")]
    class DarkPage2BodyDetailStackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .DetailStack

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.BackgroundColor = "#333333";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:83", ".dark Page2 #Body .Text1")]
    [CssBody("color: #FFFFFF;")]
    class DarkPage2BodyText1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Text1

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#FFFFFF";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:84", ".dark Page2 #Body .Text2")]
    [CssBody("color: #737373;")]
    class DarkPage2BodyText2CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .Text2

            view = CssEngine.FindParentById(view, "Body");

            if (view is null) return false;

            view = CssEngine.FindParentByType<Page2>(view);

            if (view is null) return false;

            view = CssEngine.FindParentByCssClass(view, "dark");

            if (view is null) return false;

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.TextColor = "#737373";

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("", "#Body")]
    [CssBody("height: 100%;")]
    class BodyCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Body

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Height = 100.Percent();

            return Task.CompletedTask;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [EscapeGCop("Auto-generated")]
    [CssSelector("App.UI/Styles/Components/_Utilities.scss:88", "#Wrapper")]
    [CssBody("padding: 16px;")]
    class WrapperCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Wrapper

            return true;
        }

        public override Task Apply(View view)
        {
            view.Css.Padding(16);

            return Task.CompletedTask;
        }
    }
}