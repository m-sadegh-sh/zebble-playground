//----------------------
// <auto-generated>
//     GENERATED BY ZEBBLE
// </auto-generated>
#pragma warning disable  IDE0017, CS0108, CS0436
//----------------------

#region UI.Templates.Blank
namespace UI.Templates
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Templates\Blank.zbl")]
    partial class Blank : Page
    {
        public ScrollView Body = new ScrollView();
        public Stack Wrapper = new Stack();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Body.Id = "Body";
            Body.CssClass = "Body";

            Wrapper.Id = "Wrapper";
            Wrapper.CssClass = "Wrapper";

            await Body.Add(Wrapper);
            await Add(Body);
        }
    }
}
#endregion

#region UI.Templates.NavBar
namespace UI.Templates
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Templates\NavBar.zbl")]
    partial class NavBar : Page
    {
        public Stack Main = new Stack();
        public NavigationBar Bar = new NavigationBar();
        public Canvas BodyScrollerWrapper = new Canvas();
        public ScrollView BodyScroller = new ScrollView();
        public Stack Body = new Stack();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            Main.Id = "Main";

            Bar.Id = "Bar";

            BodyScrollerWrapper.Id = "BodyScrollerWrapper";

            BodyScroller.Id = "BodyScroller";

            Body.Id = "Body";

            await BodyScroller.Add(Body);
            await BodyScrollerWrapper.Add(BodyScroller);
            await Main.AddRange(new View[] { Bar, BodyScrollerWrapper });
            await Add(Main);
        }
    }
}
#endregion

#region Zebble.NavigationBar
namespace Zebble
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Widgets\NavigationBar.zbl")]
    partial class NavigationBar : Stack
    {
        public Canvas NavBarContent = new Canvas();
        public TextView Title = new TextView();
        public Row Left = new Row();
        public BackButton Back = new BackButton();
        public Row Right = new Row();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __topUnsafeAreaFiller1 = new TopUnsafeAreaFiller();

            NavBarContent.Id = "NavBarContent";

            Title.Id = "Title";

            Left.Id = "Left";

            Back.Id = "Back";
            Back.On(x => x.Tapped, () => Mvvm.ViewModel.Back()).Bind("Ignored", () => CanGoBack, x=>!x);

            Right.Id = "Right";
            Right.HorizontalAlignment = HorizontalAlignment.Right;

            await Left.Add(Back);
            await NavBarContent.AddRange(new View[] { Title, Left, Right });
            await AddRange(new View[] { __topUnsafeAreaFiller1, NavBarContent });
        }
    }
}
#endregion

#region Zebble.Tab
namespace Zebble
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Widgets\Tab.zbl")]
    partial class Tab : ImageView
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.AutoFlash = false;

            Touched.Handle(Tap);
        }
    }
}
#endregion

#region Zebble.Tabs
namespace Zebble
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Widgets\Tabs.zbl")]
    partial class Tabs : Row, ITemplate<ViewModel.Tabs>
    {
        public ViewModel.Tabs Model = Zebble.Mvvm.ViewModel.The<ViewModel.Tabs>();

        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __tab1 = new Tab()
            {
                IsPrimary = true,
                Icon = "Images/Icons/contacts-icon.png",
                ActiveIcon = "Images/Icons/contacts-icon-blue.png",
                Target = typeof(ViewModel.Contacts)
            }
            .On(x => x.Tapped, () => Model.OnContactsTapped());

            var __tab2 = new Tab()
            {
                Icon = "Images/Icons/categories-icon.png",
                ActiveIcon = "Images/Icons/categories-icon-blue.png",
                Target = typeof(ViewModel.Categories)
            }
            .On(x => x.Tapped, () => Model.OnCategoriesTapped());

            var __tab3 = new Tab()
            {
                Icon = "Images/Icons/settings-icon.png",
                ActiveIcon = "Images/Icons/settings-icon-blue.png",
                Target = typeof(ViewModel.Settings)
            }
            .On(x => x.Tapped, () => Model.OnSettingsTapped());

            await AddRange(new View[] { __tab1, __tab2, __tab3 });
        }
    }
}
#endregion

#region UI.Pages.Page1
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Page1.zbl")]
    partial class Page1 : Templates.Empty
    {
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            var __center1 = new Center();

            var __imageView1 = new ImageView() { CssClass = "top-back", Path = "Images/GreatJob1.png" };

            var __textView1 = new TextView() { CssClass = "first", Text = "Great Job!" };

            var __textView2 = new TextView() { CssClass = "second", Text = "Keep up the good work" };

            var __center2 = new Center();

            var __primaryButton1 = new PrimaryButton() { CssClass = "PrimaryButton", Text = "Change theme" }.On(x => x.Tapped, OnStartTapped);

            await __center1.Add(__imageView1);
            await __center2.Add(__primaryButton1);
            await Body.AddRange(new View[] { __center1, __textView1, __textView2, __center2 });
        }
    }
}
#endregion

#region UI.Pages.BaseModal
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Modal\BaseModal.zbl")]
    partial class BaseModal : Page
    {
        public Stack ModalPanelWrapper = new Stack();
        public Stack Panel = new Stack();
        public Row Header = new Row();
        public TextView ModalTitle = new TextView();
        public Stack Content = new Stack();
        public Row BottomButtons = new Row();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            ModalPanelWrapper.Id = "ModalPanelWrapper";

            Panel.Id = "Panel";
            Panel.ClipChildren = true;

            Header.Id = "Header";
            Header.Ignored = true;

            ModalTitle.Id = "ModalTitle";
            ModalTitle.CssClass = "title";

            Content.Id = "Content";
            Content.ClipChildren = false;

            BottomButtons.Id = "BottomButtons";

            await Header.Add(ModalTitle);
            await Panel.AddRange(new View[] { Header, Content, BottomButtons });
            await ModalPanelWrapper.Add(Panel);
            await Add(ModalPanelWrapper);
        }
    }
}
#endregion

#region UI.Pages.ConfirmationModal
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Modal\ConfirmationModal.zbl")]
    partial class ConfirmationModal : Page
    {
        public Stack ModalPanelWrapper = new Stack();
        public Stack Panel = new Stack();
        public Row Header = new Row();
        public Stack Content = new Stack();
        public TextView ConfirmationMessage = new TextView();
        public Stack FirstButton = new Stack();
        public Stack SecondButton = new Stack();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            ModalPanelWrapper.Id = "ModalPanelWrapper";

            Panel.Id = "Panel";
            Panel.ClipChildren = true;

            Header.Id = "Header";

            var __mainImage1 = new MainImage() { Path = "Images/Icons/info.png", CssClass = "popup" };

            Content.Id = "Content";
            Content.ClipChildren = false;

            ConfirmationMessage.Id = "ConfirmationMessage";

            var __row1 = new Row() { CssClass = "Buttons" };

            FirstButton.Id = "FirstButton";

            SecondButton.Id = "SecondButton";

            await Header.Add(__mainImage1);
            await Content.Add(ConfirmationMessage);
            await __row1.AddRange(new View[] { FirstButton, SecondButton });
            await Panel.AddRange(new View[] { Header, Content, __row1 });
            await ModalPanelWrapper.Add(Panel);
            await Add(ModalPanelWrapper);
        }
    }
}
#endregion

#region UI.Pages.SuccessAlert
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Modal\SuccessAlert.zbl")]
    partial class SuccessAlert : UI.Pages.BaseModal, ITemplate<ViewModel.SuccessAlert>
    {
        public ViewModel.SuccessAlert Model = Zebble.Mvvm.ViewModel.The<ViewModel.SuccessAlert>();
        public Button OkButton = new Button();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Id = "SuccessAlert";

            var __mainImage1 = new MainImage() { Path = "Images/Icons/Success.png", CssClass = "popup" };

            var __boldText1 = new BoldText().Bind("Text", () => Model.Message);

            OkButton.Id = "OkButton";
            OkButton.Text = "OK";
            OkButton.On(x => x.Tapped, () => Model.OnOkTapped());

            await Content.AddRange(new View[] { __mainImage1, __boldText1 });
            await BottomButtons.Add(OkButton);
        }
    }
}
#endregion

#region UI.Pages.WarningAlert
namespace UI.Pages
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using Domain;
    using Zebble;
    using Zebble.Plugin;
    using Olive;
    using Zebble.Services.Css;

    [CacheView]
    [EscapeGCop("Auto-generated")]
    [SourceCode(@"Views\Pages\Modal\WarningAlert.zbl")]
    partial class WarningAlert : UI.Pages.BaseModal, ITemplate<ViewModel.WarningAlert>
    {
        public ViewModel.WarningAlert Model = Zebble.Mvvm.ViewModel.The<ViewModel.WarningAlert>();
        public Button OkButton = new Button();
        protected override async Task InitializeFromMarkup()
        {
            await base.InitializeFromMarkup();

            this.Id = "WarningAlert";

            var __mainImage1 = new MainImage() { Path = "Images/Icons/Info.png", CssClass = "popup" };

            var __textView1 = new TextView().Bind("Text", () => Model.Message);

            OkButton.Id = "OkButton";
            OkButton.CssClass = "text_primary border_0";
            OkButton.Text = "OK";
            OkButton.On(x => x.Tapped, () => Model.OnOkTapped());

            await Content.AddRange(new View[] { __mainImage1, __textView1 });
            await BottomButtons.Add(OkButton);
        }
    }
}
#endregion

namespace UI
{
    partial class StartUp
    {
        // Hashed content of all resources
        public override string GetResourcesVersion() => "zxVDIrjHM8ij5Mdcj5JCPS9I";
    }
}
